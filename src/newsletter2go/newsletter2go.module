<?php

const N2GO_API_URL = 'https://api.newsletter2go.com/';
const N2GO_INTEGRATION_URL = 'https://ui.newsletter2go.com/integrations/connect/DRU/';
const N2GO_REFRESH_GRANT_TYPE = 'https://nl2go.com/jwt_refresh';
const N2GO_PLUGIN_VERSION = 4000;

/**
 * Returns menu.
 *
 * @return array
 */
function newsletter2go_menu()
{
    $items = array();

    $items['n2go/widget'] = array(
        'title' => 'Widget Preview',
        'page callback' => '_widget_preview_page',
        'type' => MENU_CALLBACK,
        'access callback' => true,
    );

    $items['api/n2go'] = array(
        'title' => 'Newsletter2Go',
        'page callback' => '_newsletter2go_page',
        'access arguments' => array('access newsletter2go content'),
        'type' => MENU_CALLBACK,
        'access callback' => true,
    );

    $items['n2go/callback'] = array(
        'title' => 'Newsletter2Go',
        'page callback' => '_newsletter2go_callback',
        'access arguments' => array('access newsletter2go content'),
        'type' => MENU_CALLBACK,
        'access callback' => true,
    );

    $items['n2go/subscribe'] = array(
        'title' => 'Subscribe',
        'page callback' => '_ajax_newsletter2go_page',
        'access arguments' => array('access newsletter2go content'),
        'type' => MENU_CALLBACK,
        'access callback' => true,
    );
    $items['n2go/resetStyles'] = array(
        'title' => 'Reset form styles',
        'page callback' => '_reset_styles',
        'access callback' => true,
        'access arguments' => array('access newsletter2go content'),
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Return page alert.
 *
 * @param $page
 */
function newsletter2go_page_alter(&$page)
{
    if (strpos($_SERVER['REQUEST_URI'], url('n2go/widget')) === 0) {
        $page['page_top'] = null;
        $page['sidebar_first'] = null;
        $page['sidebar_second'] = null;
        $page['page_bottom'] = null;
        $page['footer'] = null;
    }
}

/**
 * Widget preview page.
 *
 * @return string
 */
function _widget_preview_page()
{
    return urldecode($_GET['widget']);
}

/**
 * Process instance authorization.
 */
function _newsletter2go_page()
{
    require_once __DIR__ . '/newsletter2goApi.php';
    $instance = Newsletter2GoApi::getInstance();
    $instance->processRequest($_SERVER['PHP_AUTH_USER'], $_GET, $_POST);
}

/**
 * Process callback
 */
function _newsletter2go_callback()
{
    require_once __DIR__ . '/newsletter2goCallback.php';
    $instance = Newsletter2GoCallback::getInstance();
    $instance->processCallback($_POST);
}

/**
 * Request newsletter2go page.
 */
function _ajax_newsletter2go_page()
{
    $notFound = false;
    $noValidEmail = false;
    $attributes = variable_get('newsletter2go_fields');
    $requiredFields = variable_get('newsletter2go_required');
    $texts = variable_get('newsletter2go_texts');
    $post = array();
    foreach ($attributes as $k => $v) {
        if (!empty($requiredFields[$k]) && empty($_POST[$k])) {
            $notFound = true;
            break;
        }

        if ($k == 'email') {
            if (!filter_var($_POST[$k], FILTER_VALIDATE_EMAIL)) {
                $noValidEmail = true;
            }
        }

        $post[$k] = $_POST[$k];
    }

    if ($notFound) {
        drupal_json_output(array('success' => 0, 'message' => $texts['failureRequired']));
        drupal_exit();
    }

    if ($noValidEmail) {
        drupal_json_output(array('success' => 0, 'message' => $texts['failureEmail']));
        drupal_exit();
    }

    $post['key'] = variable_get('newsletter2go_apikey');
    $post['doicode'] = variable_get('newsletter2go_doicode');
    $response = executeN2Go('create/recipient', $post);

    $result = array('success' => $response['success']);
    if (!$response) {
        $result['message'] = $texts['failureEmail'];
    } else {
        switch ($response['status']) {
            case 200:
                $result['message'] = $texts['success'];
                break;
            case 441:
                $result['message'] = $texts['failureSubsc'];
                break;
            case 434:
            case 429:
                $result['message'] = $texts['failureEmail'];
                break;
            default:
                $result['message'] = $texts['failureGeneral'];
                break;
        }
    }

    drupal_json_output($result);
    drupal_exit();
}

/**
 * Newsletter2go init.
 */
function newsletter2go_init()
{
    $path = drupal_get_path('module', 'newsletter2go');
    if (arg(0) == 'admin' && arg(3) == 'newsletter2go') {
        drupal_add_js($path . '/jscolor.min.js');
        drupal_add_js($path . '/newsletter2go_default.js');
        drupal_add_js($path . '/newsletter2go.js');
        drupal_add_css($path . '/font-awesome.css');
        drupal_add_css($path . '/newsletter2go.css');
    }

    if (strpos($_SERVER['REQUEST_URI'], url('n2go/widget')) === 0) {
        drupal_add_js($path . '/newsletter2go_widget.js');
    }

    drupal_add_js($path . '/newsletter2go_ajax.js');
}

/**
 * Returns newsletter2go form.
 * @param $form
 * @param $form_state
 * @return mixed
 */
function newsletter2go_form($form, &$form_state)
{


    return $form;
}

/**
 * Validate form.
 *
 * @param $form
 * @param $form_state
 */
function newsletter2go_form_validate($form, &$form_state)
{
//    if (empty($form_state['values']['api']['apikey'])) {
//        form_set_error('', t('You must enter API key.'));
//    }
}

/**
 * Form submit action.
 *
 * @param $form
 * @param $form_state
 */
function newsletter2go_form_submit($form, &$form_state)
{
//    variable_set('newsletter2go_apikey', $form_state['values']['api']['apikey']);
//    variable_set('newsletter2go_formUniqueCode', $form_state['values']['api']['formUniqueCode']);
    isset($_POST['formUniqueCode']) ?
        variable_set('newsletter2go_formUniqueCode', $_POST['formUniqueCode']) : null;

    isset($form_state['values']['colors']) ?
        variable_set('newsletter2go_colors', $form_state['values']['colors']) : null;
    isset($_POST['widgetStyleConfig']) ?
        variable_set('newsletter2go_widgetStyleConfig', $_POST['widgetStyleConfig']) : null;
    if (isset($_POST['resetValues'])) {
        disconnect();
    }
}

/**
 * Creates request and returns response.
 *
 * @param string $action
 * @param mixed $post
 * @return array
 */
function executeN2Go($action, $post)
{
    $cURL = curl_init();
    curl_setopt($cURL, CURLOPT_URL, "https://www.newsletter2go.com/en/api/$action/");
    curl_setopt($cURL, CURLOPT_RETURNTRANSFER, true);

    $postData = '';
    foreach ($post as $k => $v) {
        $postData .= urlencode($k) . '=' . urlencode($v) . '&';
    }
    $postData = substr($postData, 0, -1);

    curl_setopt($cURL, CURLOPT_POST, 1);
    curl_setopt($cURL, CURLOPT_POSTFIELDS, $postData);
    curl_setopt($cURL, CURLOPT_SSL_VERIFYPEER, false);

    $response = curl_exec($cURL);
    curl_close($cURL);

    return json_decode($response, true);
}

/**
 * Registers tokens.
 *
 * @return array
 */
function newsletter2go_token_info()
{
    $info = array();
    // Define token type
    $info['types']['newsletter2go'] = array(
        'name' => t('Newsletter2Go'),
        'description' => t('Tokens related to Newsletter2Go.'),
    );
    // Define token [newsletter2go:plugin']
    $info['tokens']['newsletter2go']['plugin'] = array(
        'name' => t('Show as plugin'),
        'description' => t('Embed subscription form in content.'),
    );
    // Define token [newsletter2go:popup']
    $info['tokens']['newsletter2go']['popup'] = array(
        'name' => t('Show as popup'),
        'description' => t('Show subscription form as popup on page (modal window).'),
    );

    return $info;
}

/**
 * Implements hook_tokens().
 *
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 * @return array
 */
function newsletter2go_tokens($type, $tokens, array $data = array(), array $options = array())
{
    $replacements = array();

    if ($type == 'newsletter2go') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'plugin':
                    $block = newsletter2go_block_view($type);
                    break;
                case 'subscribe':
                    $block = newsletter2go_block_view($type, 'createForm', 'subscribe');
                    break;
                case 'unsubscribe':
                    $block = newsletter2go_block_view($type, 'createForm', 'unsubscribe');
                    break;
                case 'popup':
                    $block = newsletter2go_block_view($type, 'createPopup');
                    break;
                default:
                    $block['content'] = "<p style='color:red;'>Wrong short code parameter <b>$name</b> - should be 'plugin' or 'popup'</p>";
            }

            $replacements[$original] = $block['content'];
        }

    }

    return $replacements;
}

function generateRandomString($length = 40)
{
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }

    return $randomString;
}

/**
 * Get forms from N2GO API
 * @param string $authKey
 * @return array|false
 */

function getForms($authKey = '')
{
    $result = false;

    if (strlen($authKey) > 0) {
        $form = execute('forms/all?_expand=1', array());
        if (isset($form['status']) && $form['status'] >= 200 && $form['status'] < 300) {
            $result = array();
            foreach ($form['value'] as $value) {
                $key = $value['hash'];
                $result[$key]['name'] = $value['name'];
                $result[$key]['hash'] = $value['hash'];
                $result[$key]['type_subscribe'] = $value['type_subscribe'];
                $result[$key]['type_unsubscribe'] = $value['type_unsubscribe'];
            }
        }
    }

    return $result;
}

/**
 * Creates request and returns response. New API and access token
 *
 * @param string $action
 * @param array $post
 * @return string
 * @internal param mixed $params
 */
function execute($action, $post)
{
    $access_token = variable_get('newsletter2go_accessToken');
    $responseJson = executeRequest($action, $access_token, $post);

    if ($responseJson['status_code'] == 403 || $responseJson['status_code'] == 401) {
        refreshTokens();
        $access_token = variable_get('newsletter2go_accessToken');
        $responseJson = executeRequest($action, $access_token, $post);
    }

    return $responseJson;
}

/**
 * Creates request and returns response. New API and access token
 *
 * @param string $action
 * @param string $access_token
 * @param array $post
 * @return string
 * @internal param mixed $params
 */

function executeRequest($action, $access_token, $post)
{

    $apiUrl = N2GO_API_URL;

    $cURL = curl_init();
    curl_setopt($cURL, CURLOPT_URL, $apiUrl . $action);
    curl_setopt($cURL, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($cURL, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $access_token));

    if (!empty($post)) {
        $postData = '';
        foreach ($post as $k => $v) {
            $postData .= urlencode($k) . '=' . urlencode($v) . '&';
        }
        $postData = substr($postData, 0, -1);

        curl_setopt($cURL, CURLOPT_POST, 1);
        curl_setopt($cURL, CURLOPT_POSTFIELDS, $postData);
    }

    curl_setopt($cURL, CURLOPT_SSL_VERIFYPEER, false);
    $response = curl_exec($cURL);
    $response = json_decode($response, true);
    $status = curl_getinfo($cURL);
    $response['status_code'] = $status['http_code'];

    curl_close($cURL);

    return $response;

}


/**
 * Creates request and returns response, refresh access token
 *
 * @return true
 * @internal param mixed $params
 */
function refreshTokens()
{

    $authKey = variable_get('newsletter2go_authKey');
    $auth = base64_encode($authKey);
    $refreshToken = variable_get('newsletter2go_refreshToken');
    $refreshPost = array(
        'refresh_token' => $refreshToken,
        'grant_type' => N2GO_REFRESH_GRANT_TYPE,
    );
    $post = http_build_query($refreshPost);

    $url = N2GO_API_URL . 'oauth/v2/token';

    $header = array('Authorization: Basic ' . $auth, 'Content-Type: application/x-www-form-urlencoded');

    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);

    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $post);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

    $json_response = curl_exec($curl);
    curl_close($curl);

    $response = json_decode($json_response);


    if (isset($response->access_token) && !empty($response->access_token)) {
        variable_set('newsletter2go_accessToken', $response->access_token);
    }
    if (isset($response->refresh_token) && !empty($response->refresh_token)) {
        variable_set('newsletter2go_refreshToken', $response->refresh_token);
    }

    return true;
}

/**
 * Reset the values that are set when callback is made
 *
 */
function disconnect()
{

    variable_set('newsletter2go_authKey', null);
    variable_set('newsletter2go_accessToken', null);
    variable_set('newsletter2go_refreshToken', null);
    variable_set('newsletter2go_formUniqueCode', null);
    variable_set('newsletter2go_widgetStyleConfig', null);

}

/**
 * This function sets widgetStyleConfig to default value
 */
function _reset_styles()
{

    $style = $_POST['style'];
    variable_set('newsletter2go_widgetStyleConfig', $style);
    print 'success';
    drupal_exit();
}

/**
 * Implements hook_block_configure().
 */
function newsletter2go_block_configure($delta = '')
{

    $formUniqueCode = variable_get('newsletter2go_formUniqueCode');
    $formType = variable_get('newsletter2go_formType');
    $authKey = variable_get('newsletter2go_authKey');
    $forms = getForms($authKey);
    $options = array();

    foreach ($forms as $f) {
        if ($formUniqueCode == $f['hash']) {
            $subscribe = $f['type_subscribe'];
            $unsubscribe = $f['type_unsubscribe'];
        }
    }

    $subscribe == true ? $options['subscribe'] = t('Subscribe-Form') : '';
    $unsubscribe == true ? $options['unsubscribe'] = t('Unsubscribe-Form') : '';

    $form = array();

    switch ($delta) {
        case 'newsletter2go' :
            // Text field form element
            $form['form_type'] = array(
                '#type' => 'select',
                '#title' => t('Form type'),
                '#default_value' => $formType,
                '#options' => $options,
            );

    }

    return $form;
}

/**
 * Implements hook_block_save().
 */
function newsletter2go_block_save($delta = '', $edit = array())
{
    switch ($delta) {
        case 'newsletter2go' :
            variable_set('newsletter2go_formType', $edit['form_type']);
            break;
    }
}
