<?php

const N2GO_API_URL = 'https://api.newsletter2go.com/';
const N2GO_INTEGRATION_URL = 'https://ui.newsletter2go.com/integrations/connect/DRU/';
const N2GO_REFRESH_GRANT_TYPE = 'https://nl2go.com/jwt_refresh';
const N2GO_PLUGIN_VERSION = 4000;

/**
 * Returns menu.
 *
 * @return array
 */
function newsletter2go_menu()
{
    $items = array();

    $items['n2go/widget'] = array(
        'title' => 'Widget Preview',
        'page callback' => '_widget_preview_page',
        'type' => MENU_CALLBACK,
        'access callback' => true,
    );

    $items['api/n2go'] = array(
        'title' => 'Newsletter2Go',
        'page callback' => '_newsletter2go_page',
        'access arguments' => array('access newsletter2go content'),
        'type' => MENU_CALLBACK,
        'access callback' => true,
    );

    $items['n2go/callback'] = array(
        'title' => 'Newsletter2Go',
        'page callback' => '_newsletter2go_callback',
        'access arguments' => array('access newsletter2go content'),
        'type' => MENU_CALLBACK,
        'access callback' => true,
    );

    $items['n2go/subscribe'] = array(
        'title' => 'Subscribe',
        'page callback' => '_ajax_newsletter2go_page',
        'access arguments' => array('access newsletter2go content'),
        'type' => MENU_CALLBACK,
        'access callback' => true,
    );
    $items['n2go/resetStyles'] = array(
        'title' => 'Reset form styles',
        'page callback' => '_reset_styles',
        'access callback' => true,
        'access arguments' => array('access newsletter2go content'),
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Return page alert.
 *
 * @param $page
 */
function newsletter2go_page_alter(&$page)
{
    if (strpos($_SERVER['REQUEST_URI'], url('n2go/widget')) === 0) {
        $page['page_top'] = null;
        $page['sidebar_first'] = null;
        $page['sidebar_second'] = null;
        $page['page_bottom'] = null;
        $page['footer'] = null;
    }
}

/**
 * Widget preview page.
 *
 * @return string
 */
function _widget_preview_page()
{
    return urldecode($_GET['widget']);
}

/**
 * Process instance authorization.
 */
function _newsletter2go_page()
{
    require_once __DIR__ . '/newsletter2goApi.php';
    $instance = Newsletter2GoApi::getInstance();
    $instance->processRequest($_SERVER['PHP_AUTH_USER'], $_GET, $_POST);
}

/**
 * Process callback
 */
function _newsletter2go_callback()
{
    require_once __DIR__ . '/newsletter2goCallback.php';
    $instance = Newsletter2GoCallback::getInstance();
    $instance->processCallback($_POST);
}

/**
 * Request newsletter2go page.
 */
function _ajax_newsletter2go_page()
{
    $notFound = false;
    $noValidEmail = false;
    $attributes = variable_get('newsletter2go_fields');
    $requiredFields = variable_get('newsletter2go_required');
    $texts = variable_get('newsletter2go_texts');
    $post = array();
    foreach ($attributes as $k => $v) {
        if (!empty($requiredFields[$k]) && empty($_POST[$k])) {
            $notFound = true;
            break;
        }

        if ($k == 'email') {
            if (!filter_var($_POST[$k], FILTER_VALIDATE_EMAIL)) {
                $noValidEmail = true;
            }
        }

        $post[$k] = $_POST[$k];
    }

    if ($notFound) {
        drupal_json_output(array('success' => 0, 'message' => $texts['failureRequired']));
        drupal_exit();
    }

    if ($noValidEmail) {
        drupal_json_output(array('success' => 0, 'message' => $texts['failureEmail']));
        drupal_exit();
    }

    $post['key'] = variable_get('newsletter2go_apikey');
    $post['doicode'] = variable_get('newsletter2go_doicode');
    $response = executeN2Go('create/recipient', $post);

    $result = array('success' => $response['success']);
    if (!$response) {
        $result['message'] = $texts['failureEmail'];
    } else {
        switch ($response['status']) {
            case 200:
                $result['message'] = $texts['success'];
                break;
            case 441:
                $result['message'] = $texts['failureSubsc'];
                break;
            case 434:
            case 429:
                $result['message'] = $texts['failureEmail'];
                break;
            default:
                $result['message'] = $texts['failureGeneral'];
                break;
        }
    }

    drupal_json_output($result);
    drupal_exit();
}

/**
 * Newsletter2go init.
 */
function newsletter2go_init()
{
    $path = drupal_get_path('module', 'newsletter2go');
    if (arg(0) == 'admin' && arg(3) == 'newsletter2go') {
        drupal_add_js($path . '/jscolor.min.js');
        drupal_add_js($path . '/newsletter2go_default.js');
        drupal_add_js($path . '/newsletter2go.js');
        drupal_add_css($path . '/font-awesome.css');
        drupal_add_css($path . '/newsletter2go.css');
    }

    if (strpos($_SERVER['REQUEST_URI'], url('n2go/widget')) === 0) {
        drupal_add_js($path . '/newsletter2go_widget.js');
    }

    drupal_add_js($path . '/newsletter2go_ajax.js');
}

/**
 * Returns newsletter2go form.
 * @param $form
 * @param $form_state
 * @return mixed
 */
function newsletter2go_form($form, &$form_state)
{

    $apiKey = variable_get('newsletter2go_apikey');
    $formUniqueCode = variable_get('newsletter2go_formUniqueCode');
    $nl2gStylesConfigObject = variable_get('newsletter2go_widgetStyleConfig');

    $queryParams['version'] = N2GO_PLUGIN_VERSION;
    $queryParams['apiKey'] = $apiKey;

    if ($queryParams['apiKey'] == '') {
        variable_set('newsletter2go_apikey', generateRandomString());
        $queryParams['apiKey'] = variable_get('newsletter2go_apikey');
    }

    $queryParams['language'] = $GLOBALS['language']->language;
    $queryParams['url'] = rtrim($GLOBALS['base_url'], '/');
    $queryParams['callback'] = $queryParams['url'] . '/n2go/callback';

    $apiConnectUrl = N2GO_INTEGRATION_URL . '?' . http_build_query($queryParams);

    $authKey = variable_get('newsletter2go_authKey');
    $forms = getForms($authKey);

    $hasForms = true;
    if ($forms === false) {
        $hasForms = false;
        $forms = array();
    }

    $selectForms = array();
    foreach ($forms as $f) {
        $selectForms[$f['hash']] = $f['name'];
    }

    $response = executeN2Go('get/attributes', array('key' => $apiKey));
    $color = $response['success'] ? 'greenyellow' : 'yellow';


    if (!strlen($formUniqueCode) > 0) {
        $errorMessage = "Please, enter the form unique code!";
    }

    if (isset($forms[$formUniqueCode]['type_subscribe'])) {
        $forms[$formUniqueCode]['type_subscribe'] ? $active = true : $active = false;
    } else {
        $active = false;
    }

    $form['api'] = array(

        '#tree' => true,
        '#submit' => array('newsletter2go_form_submit'),
        'n2goSection' => array(
            '#markup' => '    <div class="n2go-section">
        <img src="'. url() . drupal_get_path('module', 'newsletter2go') . '/images/banner_drupal_newsletter2go.png"'.'
			  
            width="92%; margin-left: 18px;" class="n2go_logo">
        <div class="n2go-block main-block" style="width:92%; margin-bottom: 30px; margin-left: 18px;">
            <div class="panel">
                <div class="panel-heading text-center">
                    <h3>So benutzen Sie die Anmeldeformulare</h3>
                </div>
                <div class="n2go-row">
                    <div class="n2go-block50">
                        <h4>als Block</h4>
                        <p>Unter Struktur -> Blocks können Sie ihr konfiguriertes Formular bequem in ihre
                            Seitenleisten und Menüs einfügen</p>
                    </div>

                    <div class="n2go-block50">
                        <h4>in Seiten</h4>
                        <p>Über den Shortcode <code>[newsletter2go:plugin]</code> können Sie ihr
                            konfiguriertes Anmeldeformular in allen Seiten über den Editor einbinden.<br/>
                            <br/>
                            Durch den Parameter <code>[newsletter2go:plugin:subscribe]</code> bzw. <code>[newsletter2go:plugin:unsubscribe]</code>
                            erzeugen Sie ein An- bzw. Abmeldeformular, soweit dieser Formular-Typ im Newsletter2Go-System ebenfalls aktiviert wurde.
                            Standardmäßig wird ein Anmeldeformular erzeugt.<br/><br/>
                            Mit der zusätzlichen Option <code>[newsletter2go:popup]</code> wird aus dem
                            eingebetten Formular ein Popup welches auf der spezifischen Seite eingeblendet wird.</p>
                    </div>
                </div>
                <div style="clear: both"></div>
            </div>
        </div>

    </div>
		<div class="n2go-section">
                            <div class="n2go-block50 main-block">
                                <div class="panel">
                                    <div class="panel-heading text-center">
                                        <h3>' . t('Newsletter2Go Drupal Plugin') . '</h3>
                                    </div>
                                        <div class="panel-body">',
        ),

        'connectButton' => array(
            '#markup' => '  <div class="n2go-row">
                        <div class="n2go-block50"><span>' . t('Login or Create Account') . '</span></div>
                        <div class="n2go-block25">' .

                ($hasForms === false ? ' <div class="n2go-btn">
                                    <input type="hidden" name="apiKey" placeholder="" value=' . $apiKey . ' style="width:300px" readonly>
                                    <a href=' . $apiConnectUrl . ' target="_blank" style="padding:5px"><span class="fa fa-plug"></span> <span>' . t('Login or Create Account') . '</span></a>
                                </div></div></div>'

                    : '<span class="n2go-label-success"> <span class="fa fa-check margin-right-5"></span>
                            <span>' . t('Successfully connected') . '</span></span><br><br><button type="submit" name="resetValues" value="disconnect" class="n2go-disconnect-btn">' . t('Disconnect') . '</button></div></div>'),
        ),

        'selectBody' => array(
            '#markup' => '  <div class="n2go-row">
                      <div class="n2go-block50"><span>' . t('Choose the connected subscribe form') . '</span></div>
                        <div class="n2go-block25">',
        ),

        'formUniqueCode' => array(
            '#id' => 'formUniqueCode',
            '#type' => 'select',
            '#default_value' => $formUniqueCode,
            '#options' => $selectForms,
        ),

        'endSelectBody' => array(
            '#markup' => '</div></div>',
        ),

        'endPanelBody' => array(
            '#markup' => '</div>',
        ),

        'colorPanel' => array(
            '#markup' => '    <div class="n2go-row">
                    <div class="n2go-block50"><span>' . t('Configure your Drupal widget') . '</span></div>
                    <div class="n2go-block50">',
        ),

        'formUniqueCode' => array(
            '#id' => 'formUniqueCode',
            '#name' => 'formUniqueCode',
            '#type' => 'select',
            '#default_value' => $formUniqueCode,
            '#options' => $selectForms,
            '#attributes' => array(
                'class' => array('n2go-select'),
            ),
        ),

        'form.background-color' => array(
            '#id' => 'valueInputFBC',
            '#name' => 'form.background-color',
            '#type' => 'textfield',
            '#default_value' => 'FFFFFF',
            '#theme_wrappers' => array(),
            '#prefix' => '<label for="formBackgroundColor">' . t('Form background color') . '</label>
                    <div class="n2go-cp input-group">
                        <span class="n2go-input-group-addon">#</span>',
            '#suffix' => '<button id="styleInputFBC" class="input-group-btn jscolor{valueElement:\'valueInputFBC\', styleElement:\'styleInputFBC\'}">
                        </button>
                    </div>',
            '#attributes' => array(
                'class' => array('n2go-colorField', 'form-control', 'n2go-text-right'),
            ),
        ),
        'label.color' => array(
            '#id' => 'valueInputLC',
            '#type' => 'textfield',
            '#name' => 'label.color',
            '#default_value' => '222222',
            '#theme_wrappers' => array(),
            '#prefix' => '<label for="formBackgroundColor">' . t('Label color') . '</label>
                    <div class="n2go-cp input-group">
                        <span class="n2go-input-group-addon">#</span>',
            '#suffix' => '<button id="styleInputLC" class="input-group-btn jscolor{valueElement:\'valueInputLC\', styleElement:\'styleInputLC\'}">
                        </button>
                    </div>',
            '#attributes' => array(
                'class' => array('n2go-colorField', 'form-control', 'n2go-text-right'),
            ),
        ),
        'input.color' => array(
            '#id' => 'valueInputIC',
            '#type' => 'textfield',
            '#name' => 'input.color',
            '#default_value' => '222222',
            '#theme_wrappers' => array(),
            '#prefix' => '<label for="formBackgroundColor">' . t('Input color') . '</label>
                        <div class="n2go-cp input-group">
                            <span class="n2go-input-group-addon">#</span>',
            '#suffix' => '<button id="styleInputIC" class="input-group-btn jscolor{valueElement:\'valueInputIC\', styleElement:\'styleInputIC\'}">
                            </button>
                        </div>',
            '#attributes' => array(
                'class' => array('n2go-colorField', 'form-control', 'n2go-text-right'),
            ),
        ),
        'input.border-color' => array(
            '#id' => 'valueInputIBrC',
            '#type' => 'textfield',
            '#name' => 'input.border-color',
            '#default_value' => 'CCCCCC',
            '#theme_wrappers' => array(),
            '#prefix' => '<label for="formBackgroundColor">' . t('Input border color') . '</label>
                            <div class="n2go-cp input-group">
                                <span class="n2go-input-group-addon">#</span>',
            '#suffix' => '<button id="styleInputIBrC" class="input-group-btn jscolor{valueElement:\'valueInputIBrC\', styleElement:\'styleInputIBrC\'}">
                                </button>
                            </div>',
            '#attributes' => array(
                'class' => array('n2go-colorField', 'form-control', 'n2go-text-right'),
            ),
        ),
        'input.background-color' => array(
            '#id' => 'valueInputIBC',
            '#type' => 'textfield',
            '#name' => 'input.background-color',
            '#default_value' => 'FFFFFF',
            '#theme_wrappers' => array(),
            '#prefix' => '<label for="formBackgroundColor">' . t('Input background color') . '</label>
                                <div class="n2go-cp input-group">
                                    <span class="n2go-input-group-addon">#</span>',
            '#suffix' => '<button id="styleInputIBC" class="input-group-btn jscolor{valueElement:\'valueInputIBC\', styleElement:\'styleInputIBC\'}">
                                    </button>
                                </div>',
            '#attributes' => array(
                'class' => array('n2go-colorField', 'form-control', 'n2go-text-right'),
            ),
        ),
        'button.color' => array(
            '#id' => 'valueInputBC',
            '#type' => 'textfield',
            '#name' => 'button.color',
            '#default_value' => 'FFFFFF',
            '#theme_wrappers' => array(),
            '#prefix' => '<label for="formBackgroundColor">' . t('Button text color') . '</label>
                                    <div class="n2go-cp input-group">
                                        <span class="n2go-input-group-addon">#</span>',
            '#suffix' => '<button id="styleInputBC" class="input-group-btn jscolor{valueElement:\'valueInputBC\', styleElement:\'styleInputBC\'}">
                                        </button>
                                    </div>',
            '#attributes' => array(
                'class' => array('n2go-colorField', 'form-control', 'n2go-text-right'),
            ),
        ),
        'button.background-color' => array(
            '#id' => 'valueInputBBC',
            '#type' => 'textfield',
            '#name' => 'button.background-color',
            '#default_value' => '00BAFF',
            '#theme_wrappers' => array(),
            '#prefix' => '<label for="formBackgroundColor">' . t('Button background color') . '</label>
                                        <div class="n2go-cp input-group">
                                            <span class="n2go-input-group-addon">#</span>',
            '#suffix' => '<button id="styleInputBBC" class="input-group-btn jscolor{valueElement:\'valueInputBBC\', styleElement:\'styleInputBBC\'}">
                                            </button>
                                        </div>',
            '#attributes' => array(
                'class' => array('n2go-colorField', 'form-control', 'n2go-text-right'),
            ),
        ),

        'endColorPanel' => array(
            '#markup' => '</div>
             </div>',
        ),

        'endN2GoPanel' => array(
            '#markup' => '</div>',
        ),

        'endN2GoMainBlock' => array(
            '#markup' => '</div>',
        ),

        'preview' => array(
            '#markup' => '<div class="n2go-block50 main-block">
            <div class="panel">
                <div class="panel-heading text-center">
                    <h3>' . t('This is how your form will look like') . '</h3>
                </div>
                <div class="panel-body">
                    <ul id="n2gButtons" class="nav nav-tabs">
                        ' . ((isset($forms[$formUniqueCode]['type_subscribe']) && $forms[$formUniqueCode]['type_subscribe']) ? '<li id="btnShowPreviewSubscribe" class="active">' . t('Subscription-Form') . '</li>' : '') .
                '' . ((isset($forms[$formUniqueCode]['type_unsubscribe']) && $forms[$formUniqueCode]['type_unsubscribe']) ? '<li id="btnShowPreviewUnsubscribe" ' . (!$active ? 'class="active"' : '') . '>' . t('Unsubscription-Form') . '</li>' : '') .
                '<li id="btnShowConfig" class="">' . t('Source') . '</li>
                    </ul>
                    <div id="preview-form-panel" class="preview-pane">
                        <div id="widgetPreview" ' . (!$active ? 'style="display:none"' : '') . '>' .

                (!isset($errorMessage) ? ' <script id="n2g_script_subscribe">
                                </script>'

                    : '<h3 class="n2go-error-general">' . $errorMessage . '</h3>') .
                '</div>
                        <div id="widgetPreviewUnsubscribe" ' . ($active ? 'style="display:none"' : '') . '><script id="n2g_script_unsubscribe"></script></div>
                        <div id="nl2gStylesConfig" class="preview-pane">
                            <textarea id="widgetStyleConfig" name="widgetStyleConfig">' . $nl2gStylesConfigObject . '</textarea>
                        </div>
                    </div>
                    <div>
                    <a id ="resetStyles" value="resetStyles" class="save-btn n2go-reset-styles-btn" name="resetStyles">' . t('Reset styles') . '</a>
                    </div>
                </div>
            </div>
        </div>',
        ),

        'submit' => array(
            '#type' => 'submit',
            '#default_value' => t('Save settings'),
            '#name' => 'saveSettings',
            '#prefix' => '</div><div class="n2go-section"><br />',
            '#suffix' => '</div>',
            '#attributes' => array(
                'class' => array('save-btn', 'button', 'button-primary', 'n2go-btn'),
            ),
        ),
    );

    return $form;
}

/**
 * Validate form.
 *
 * @param $form
 * @param $form_state
 */
function newsletter2go_form_validate($form, &$form_state)
{
//    if (empty($form_state['values']['api']['apikey'])) {
//        form_set_error('', t('You must enter API key.'));
//    }
}

/**
 * Form submit action.
 *
 * @param $form
 * @param $form_state
 */
function newsletter2go_form_submit($form, &$form_state)
{
//    variable_set('newsletter2go_apikey', $form_state['values']['api']['apikey']);
//    variable_set('newsletter2go_formUniqueCode', $form_state['values']['api']['formUniqueCode']);
    isset($_POST['formUniqueCode']) ?
        variable_set('newsletter2go_formUniqueCode', $_POST['formUniqueCode']) : null;

    isset($form_state['values']['colors']) ?
        variable_set('newsletter2go_colors', $form_state['values']['colors']) : null;
    isset($_POST['widgetStyleConfig']) ?
        variable_set('newsletter2go_widgetStyleConfig', $_POST['widgetStyleConfig']) : null;
    if (isset($_POST['resetValues'])) {
        disconnect();
    }
}

/**
 * Creates request and returns response.
 *
 * @param string $action
 * @param mixed $post
 * @return array
 */
function executeN2Go($action, $post)
{
    $cURL = curl_init();
    curl_setopt($cURL, CURLOPT_URL, "https://www.newsletter2go.com/en/api/$action/");
    curl_setopt($cURL, CURLOPT_RETURNTRANSFER, true);

    $postData = '';
    foreach ($post as $k => $v) {
        $postData .= urlencode($k) . '=' . urlencode($v) . '&';
    }
    $postData = substr($postData, 0, -1);

    curl_setopt($cURL, CURLOPT_POST, 1);
    curl_setopt($cURL, CURLOPT_POSTFIELDS, $postData);
    curl_setopt($cURL, CURLOPT_SSL_VERIFYPEER, false);

    $response = curl_exec($cURL);
    curl_close($cURL);

    return json_decode($response, true);
}

/**
 * Registers tokens.
 *
 * @return array
 */
function newsletter2go_token_info()
{
    $info = array();
    // Define token type
    $info['types']['newsletter2go'] = array(
        'name' => t('Newsletter2Go'),
        'description' => t('Tokens related to Newsletter2Go.'),
    );
    // Define token [newsletter2go:plugin']
    $info['tokens']['newsletter2go']['plugin'] = array(
        'name' => t('Show as plugin'),
        'description' => t('Embed subscription form in content.'),
    );
    // Define token [newsletter2go:popup']
    $info['tokens']['newsletter2go']['popup'] = array(
        'name' => t('Show as popup'),
        'description' => t('Show subscription form as popup on page (modal window).'),
    );

    return $info;
}

/**
 * Implements hook_tokens().
 *
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 * @return array
 */
function newsletter2go_tokens($type, $tokens, array $data = array(), array $options = array())
{
    $replacements = array();

    if ($type == 'newsletter2go') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'plugin':
                    $block = newsletter2go_block_view($type);
                    break;
                case 'subscribe':
                    $block = newsletter2go_block_view($type, 'createForm', 'subscribe');
                    break;
                case 'unsubscribe':
                    $block = newsletter2go_block_view($type, 'createForm', 'unsubscribe');
                    break;
                case 'popup':
                    $block = newsletter2go_block_view($type, 'createPopup');
                    break;
                default:
                    $block['content'] = "<p style='color:red;'>Wrong short code parameter <b>$name</b> - should be 'plugin' or 'popup'</p>";
            }

            $replacements[$original] = $block['content'];
        }

    }

    return $replacements;
}

function generateRandomString($length = 40)
{
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }

    return $randomString;
}

/**
 * Get forms from N2GO API
 * @param string $authKey
 * @return array|false
 */

function getForms($authKey = '')
{
    $result = false;

    if (strlen($authKey) > 0) {
        $form = execute('forms/all?_expand=1', array());
        if (isset($form['status']) && $form['status'] >= 200 && $form['status'] < 300) {
            $result = array();
            foreach ($form['value'] as $value) {
                $key = $value['hash'];
                $result[$key]['name'] = $value['name'];
                $result[$key]['hash'] = $value['hash'];
                $result[$key]['type_subscribe'] = $value['type_subscribe'];
                $result[$key]['type_unsubscribe'] = $value['type_unsubscribe'];
            }
        }
    }

    return $result;
}

/**
 * Creates request and returns response. New API and access token
 *
 * @param string $action
 * @param array $post
 * @return string
 * @internal param mixed $params
 */
function execute($action, $post)
{
    $access_token = variable_get('newsletter2go_accessToken');
    $responseJson = executeRequest($action, $access_token, $post);

    if ($responseJson['status_code'] == 403 || $responseJson['status_code'] == 401) {
        refreshTokens();
        $access_token = variable_get('newsletter2go_accessToken');
        $responseJson = executeRequest($action, $access_token, $post);
    }

    return $responseJson;
}

/**
 * Creates request and returns response. New API and access token
 *
 * @param string $action
 * @param string $access_token
 * @param array $post
 * @return string
 * @internal param mixed $params
 */

function executeRequest($action, $access_token, $post)
{

    $apiUrl = N2GO_API_URL;

    $cURL = curl_init();
    curl_setopt($cURL, CURLOPT_URL, $apiUrl . $action);
    curl_setopt($cURL, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($cURL, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $access_token));

    if (!empty($post)) {
        $postData = '';
        foreach ($post as $k => $v) {
            $postData .= urlencode($k) . '=' . urlencode($v) . '&';
        }
        $postData = substr($postData, 0, -1);

        curl_setopt($cURL, CURLOPT_POST, 1);
        curl_setopt($cURL, CURLOPT_POSTFIELDS, $postData);
    }

    curl_setopt($cURL, CURLOPT_SSL_VERIFYPEER, false);
    $response = curl_exec($cURL);
    $response = json_decode($response, true);
    $status = curl_getinfo($cURL);
    $response['status_code'] = $status['http_code'];

    curl_close($cURL);

    return $response;

}


/**
 * Creates request and returns response, refresh access token
 *
 * @return true
 * @internal param mixed $params
 */
function refreshTokens()
{

    $authKey = variable_get('newsletter2go_authKey');
    $auth = base64_encode($authKey);
    $refreshToken = variable_get('newsletter2go_refreshToken');
    $refreshPost = array(
        'refresh_token' => $refreshToken,
        'grant_type' => N2GO_REFRESH_GRANT_TYPE,
    );
    $post = http_build_query($refreshPost);

    $url = N2GO_API_URL . 'oauth/v2/token';

    $header = array('Authorization: Basic ' . $auth, 'Content-Type: application/x-www-form-urlencoded');

    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);

    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $post);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);

    $json_response = curl_exec($curl);
    curl_close($curl);

    $response = json_decode($json_response);


    if (isset($response->access_token) && !empty($response->access_token)) {
        variable_set('newsletter2go_accessToken', $response->access_token);
    }
    if (isset($response->refresh_token) && !empty($response->refresh_token)) {
        variable_set('newsletter2go_refreshToken', $response->refresh_token);
    }

    return true;
}

/**
 * Reset the values that are set when callback is made
 *
 */
function disconnect()
{

    variable_set('newsletter2go_authKey', null);
    variable_set('newsletter2go_accessToken', null);
    variable_set('newsletter2go_refreshToken', null);
    variable_set('newsletter2go_formUniqueCode', null);
    variable_set('newsletter2go_widgetStyleConfig', null);

}

/**
 * This function sets widgetStyleConfig to default value
 */
function _reset_styles()
{

    $style = $_POST['style'];
    variable_set('newsletter2go_widgetStyleConfig', $style);
    print 'success';
    drupal_exit();
}

/**
 * Implements hook_block_configure().
 */
function newsletter2go_block_configure($delta = '')
{

    $formUniqueCode = variable_get('newsletter2go_formUniqueCode');
    $formType = variable_get('newsletter2go_formType');
    $authKey = variable_get('newsletter2go_authKey');
    $forms = getForms($authKey);
    $options = array();

    foreach ($forms as $f) {
        if ($formUniqueCode == $f['hash']) {
            $subscribe = $f['type_subscribe'];
            $unsubscribe = $f['type_unsubscribe'];
        }
    }

    $subscribe == true ? $options['subscribe'] = t('Subscribe-Form') : '';
    $unsubscribe == true ? $options['unsubscribe'] = t('Unsubscribe-Form') : '';

    $form = array();

    switch ($delta) {
        case 'newsletter2go' :
            // Text field form element
            $form['form_type'] = array(
                '#type' => 'select',
                '#title' => t('Form type'),
                '#default_value' => $formType,
                '#options' => $options,
            );

    }

    return $form;
}

/**
 * Implements hook_block_save().
 */
function newsletter2go_block_save($delta = '', $edit = array())
{
    switch ($delta) {
        case 'newsletter2go' :
            variable_set('newsletter2go_formType', $edit['form_type']);
            break;
    }
}
